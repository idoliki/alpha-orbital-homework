import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React from 'react';
import { dehydrate, QueryClient, useQuery } from 'react-query';

import ArticleList from '@/components/ArticleList';
import SearchFilterInput from '@/components/SearchFilterInput';
import SkeletonArticlesGrid from '@/components/skeletons/SkeletonArticlesGrid';
import SkeletonCategoryFilters from '@/components/skeletons/SkeletonCategoryFilters';
import SkeletonText from '@/components/skeletons/SkeletonText';

import { ArticleContext } from '@/contexts/ArticleProvider';
import { Button } from '@/ui/button';
import { Container, Grid } from '@/ui/layout';
import { InfoText, Text } from '@/ui/typography';
import { Spacer } from '@/ui/utils';
import filterArticles from '@/utils/filterArticles';
import getArticles from '@/utils/getArticles';

import { CategoryEnum } from '@/types/CategoryEnum';
import { IArticle } from '@/types/IArticle';

type HomeProps = {
   articles: IArticle[];
};

type QueryParams = {
   query?: string;
   filter?: string;
};

const Home: NextPage<HomeProps> = ({ articles: _articles }) => {
   const router = useRouter();
   const initialSearchInput = () => (router.query.query as string) || '';
   const [searchInputDebounced, setSearchInputDebounced] = React.useState('');
   const initialActiveCategory = () =>
      Number(router.query.filter as string) || 0;

   const [availableCategories, setAvailableCategories] = React.useState<
      string[] | null
   >(null);
   const [activeCategory, setActiveCategory] = React.useState(
      initialActiveCategory
   );

   const { removedArticles, setRemovedArticles } =
      React.useContext(ArticleContext);

   // Keep original categories for filters
   const { data: originalArticles, isLoading } = useQuery(
      'articles',
      getArticles
   );

   // Filter available categories depending on the article categories IDs
   // If article does not contain a category -- don't show it
   React.useEffect(() => {
      if (originalArticles) {
         const categoriesSet = new Set<string>();
         originalArticles &&
            originalArticles.forEach((article) => {
               categoriesSet.add(article.post_category_id);
            });
         const categoriesArr = Array.from(categoriesSet).sort();
         setAvailableCategories(['0', ...categoriesArr]);
      }
   }, [originalArticles]);

   React.useEffect(() => {
      const queryParams: QueryParams = {};
      if (searchInputDebounced || activeCategory) {
         if (searchInputDebounced) {
            queryParams.query = searchInputDebounced;
         }
         if (activeCategory) {
            queryParams.filter = activeCategory.toString();
         }
      }

      router.push(
         {
            query: queryParams,
         },
         undefined,
         { shallow: true }
      );
      // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [searchInputDebounced, activeCategory]);

   // Filtered articles to show up in the ArticleList component
   const { data: articles } = useQuery(['articles'], getArticles, {
      select: (articles) =>
         filterArticles(
            searchInputDebounced,
            activeCategory,
            articles,
            removedArticles
         ),
   });

   const handleCategoryChange = (category: number) =>
      setActiveCategory(category);

   return (
      <>
         <Head>
            <title>Alpha Orbital Articles</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
         </Head>

         <Container>
            <label htmlFor='query'>
               <Text>Filter by title:</Text>
               <SearchFilterInput
                  initialSearchInput={initialSearchInput}
                  setSearchDebounce={setSearchInputDebounced}
               />
            </label>

            <Spacer size={1} />
            {isLoading && <SkeletonText />}
            {articles && (
               <InfoText>
                  Found {articles.length}{' '}
                  {articles.length === 1 ? 'article' : 'articles'} in the
                  selected category.
               </InfoText>
            )}
            <Spacer size={3} />

            <Text>Filter by categories:</Text>
            {(!availableCategories || isLoading) && <SkeletonCategoryFilters />}
            <Grid cols={5}>
               {availableCategories &&
                  Boolean(availableCategories.length) &&
                  availableCategories.map((_category) => {
                     const category = Number(_category);
                     return (
                        <Button
                           key={category}
                           color='primary'
                           active={activeCategory === category}
                           onClick={() => handleCategoryChange(category)}
                        >
                           {CategoryEnum[category]}
                        </Button>
                     );
                  })}
            </Grid>

            <Spacer size={2} />

            <Spacer size={3} />

            {Boolean(removedArticles.length) && (
               <Button
                  color='primary'
                  onClick={() => setRemovedArticles([])}
                  fullWidth
               >
                  Refetch
               </Button>
            )}

            <Spacer size={6} />

            {isLoading && <SkeletonArticlesGrid />}
            {articles && <ArticleList articles={articles} />}
         </Container>
      </>
   );
};

export async function getServerSideProps() {
   const queryClient = new QueryClient();
   await queryClient.prefetchQuery('articles', getArticles);

   return {
      props: {
         dehydratedState: dehydrate(queryClient),
      },
   };
}

export default Home;
